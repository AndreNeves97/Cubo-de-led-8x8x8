/**
 *  Modelagem:
 *  
 *  Cada frame do cubo ( um estado ) que é de-
 *  finido como um conjunto de 512 bits, con-
 *  tendo o estado de cada led individual, é
 *  representado por 1 array de 64 bytes:
 * 
 *  64 bytes = 512 bits
 *  
 *  // TODO
 *  Para manter alguns frames de segurança uma 
 *  cache com apenas alguns frames será manti-
 *  da.
 * 
 *  O array que representa um frame do cubo se-
 *  rá padronizado da seguinte forma:
 * 
 *  | byte |    b0    |    b1    |    b2    |    b3    |    b4    |    b5    |    b6    |    b7    |          
 *  |  0   |  [0,0,0] |  [0,0,1] |  [0,0,2] |  [0,0,3] |  [0,0,4] |  [0,0,5] |  [0,0,6] |  [0,0,7] |
 *  |  1   |  [1,0,0] |  [1,0,1] |  [1,0,2] |  [1,0,3] |  [1,0,4] |  [1,0,5] |  [1,0,6] |  [1,0,7] |
 *  |  2   |  [2,0,0] |  [2,0,1] |  [2,0,2] |  [2,0,3] |  [2,0,4] |  [2,0,5] |  [2,0,6] |  [2,0,7] |
 *  |  3   |  [3,0,0] |  [3,0,1] |  [3,0,2] |  [3,0,3] |  [3,0,4] |  [3,0,5] |  [3,0,6] |  [3,0,7] |
 *  |  4   |  [4,0,0] |  [4,0,1] |  [4,0,2] |  [4,0,3] |  [4,0,4] |  [4,0,5] |  [4,0,6] |  [4,0,7] |
 *  |  5   |  [5,0,0] |  [5,0,1] |  [5,0,2] |  [5,0,3] |  [5,0,4] |  [5,0,5] |  [5,0,6] |  [5,0,7] |
 *  |  6   |  [6,0,0] |  [6,0,1] |  [6,0,2] |  [6,0,3] |  [6,0,4] |  [6,0,5] |  [6,0,6] |  [6,0,7] |
 *  |  7   |  [7,0,0] |  [7,0,1] |  [7,0,2] |  [7,0,3] |  [7,0,4] |  [7,0,5] |  [7,0,6] |  [7,0,7] |
 *  |  8   |  [0,1,0] |  [0,1,1] |  [0,1,2] |  [0,1,3] |  [0,1,4] |  [0,1,5] |  [0,1,6] |  [0,1,7] |
 *  |  9   |  [1,1,0] |  [1,1,1] |  [1,1,2] |  [1,1,3] |  [1,1,4] |  [1,1,5] |  [1,1,6] |  [1,1,7] |
 *  |  10  |  [2,1,0] |  [2,1,1] |  [2,1,2] |  [2,1,3] |  [2,1,4] |  [2,1,5] |  [2,1,6] |  [2,1,7] |
 *  |  11  |  [3,1,0] |  [3,1,1] |  [3,1,2] |  [3,1,3] |  [3,1,4] |  [3,1,5] |  [3,1,6] |  [3,1,7] |
 *  |  12  |  [4,1,0] |  [4,1,1] |  [4,1,2] |  [4,1,3] |  [4,1,4] |  [4,1,5] |  [4,1,6] |  [4,1,7] |
 *  |  13  |  [5,1,0] |  [5,1,1] |  [5,1,2] |  [5,1,3] |  [5,1,4] |  [5,1,5] |  [5,1,6] |  [5,1,7] |
 *  |  14  |  [6,1,0] |  [6,1,1] |  [6,1,2] |  [6,1,3] |  [6,1,4] |  [6,1,5] |  [6,1,6] |  [6,1,7] |
 *  |  15  |  [7,1,0] |  [7,1,1] |  [7,1,2] |  [7,1,3] |  [7,1,4] |  [7,1,5] |  [7,1,6] |  [7,1,7] |   
 *  |  16  |  [0,2,0] |  [0,2,1] |  [0,2,2] |  [0,2,3] |  [0,2,4] |  [0,2,5] |  [0,2,6] |  [0,2,7] |
 *  |  17  |  [1,2,0] |  [1,2,1] |  [1,2,2] |  [1,2,3] |  [1,2,4] |  [1,2,5] |  [1,2,6] |  [1,2,7] |
 *  |  18  |  [2,2,0] |  [2,2,1] |  [2,2,2] |  [2,2,3] |  [2,2,4] |  [2,2,5] |  [2,2,6] |  [2,2,7] |
 *  |  19  |  [3,2,0] |  [3,2,1] |  [3,2,2] |  [3,2,3] |  [3,2,4] |  [3,2,5] |  [3,2,6] |  [3,2,7] |
 *  |  20  |  [4,2,0] |  [4,2,1] |  [4,2,2] |  [4,2,3] |  [4,2,4] |  [4,2,5] |  [4,2,6] |  [4,2,7] |
 *  |  21  |  [5,2,0] |  [5,2,1] |  [5,2,2] |  [5,2,3] |  [5,2,4] |  [5,2,5] |  [5,2,6] |  [5,2,7] |
 *  |  22  |  [6,2,0] |  [6,2,1] |  [6,2,2] |  [6,2,3] |  [6,2,4] |  [6,2,5] |  [6,2,6] |  [6,2,7] |
 *  |  23  |  [7,2,0] |  [7,2,1] |  [7,2,2] |  [7,2,3] |  [7,2,4] |  [7,2,5] |  [7,2,6] |  [7,2,7] |
 *  |  24  |  [0,3,0] |  [0,3,1] |  [0,3,2] |  [0,3,3] |  [0,3,4] |  [0,3,5] |  [0,3,6] |  [0,3,7] |
 *  |  25  |  [1,3,0] |  [1,3,1] |  [1,3,2] |  [1,3,3] |  [1,3,4] |  [1,3,5] |  [1,3,6] |  [1,3,7] |
 *  |  26  |  [2,3,0] |  [2,3,1] |  [2,3,2] |  [2,3,3] |  [2,3,4] |  [2,3,5] |  [2,3,6] |  [2,3,7] |
 *  |  27  |  [3,3,0] |  [3,3,1] |  [3,3,2] |  [3,3,3] |  [3,3,4] |  [3,3,5] |  [3,3,6] |  [3,3,7] |
 *  |  28  |  [4,3,0] |  [4,3,1] |  [4,3,2] |  [4,3,3] |  [4,3,4] |  [4,3,5] |  [4,3,6] |  [4,3,7] |
 *  |  29  |  [5,3,0] |  [5,3,1] |  [5,3,2] |  [5,3,3] |  [5,3,4] |  [5,3,5] |  [5,3,6] |  [5,3,7] |
 *  |  30  |  [6,3,0] |  [6,3,1] |  [6,3,2] |  [6,3,3] |  [6,3,4] |  [6,3,5] |  [6,3,6] |  [6,3,7] |
 *  |  31  |  [7,3,0] |  [7,3,1] |  [7,3,2] |  [7,3,3] |  [7,3,4] |  [7,3,5] |  [7,3,6] |  [7,3,7] |
 *  |  32  |  [0,4,0] |  [0,4,1] |  [0,4,2] |  [0,4,3] |  [0,4,4] |  [0,4,5] |  [0,4,6] |  [0,4,7] |
 *  |  33  |  [1,4,0] |  [1,4,1] |  [1,4,2] |  [1,4,3] |  [1,4,4] |  [1,4,5] |  [1,4,6] |  [1,4,7] |
 *  |  34  |  [2,4,0] |  [2,4,1] |  [2,4,2] |  [2,4,3] |  [2,4,4] |  [2,4,5] |  [2,4,6] |  [2,4,7] |
 *  |  35  |  [3,4,0] |  [3,4,1] |  [3,4,2] |  [3,4,3] |  [3,4,4] |  [3,4,5] |  [3,4,6] |  [3,4,7] |
 *  |  36  |  [4,4,0] |  [4,4,1] |  [4,4,2] |  [4,4,3] |  [4,4,4] |  [4,4,5] |  [4,4,6] |  [4,4,7] |
 *  |  37  |  [5,4,0] |  [5,4,1] |  [5,4,2] |  [5,4,3] |  [5,4,4] |  [5,4,5] |  [5,4,6] |  [5,4,7] |
 *  |  38  |  [6,4,0] |  [6,4,1] |  [6,4,2] |  [6,4,3] |  [6,4,4] |  [6,4,5] |  [6,4,6] |  [6,4,7] |
 *  |  39  |  [7,4,0] |  [7,4,1] |  [7,4,2] |  [7,4,3] |  [7,4,4] |  [7,4,5] |  [7,4,6] |  [7,4,7] |
 *  |  40  |  [0,5,0] |  [0,5,1] |  [0,5,2] |  [0,5,3] |  [0,5,4] |  [0,5,5] |  [0,5,6] |  [0,5,7] | 
 *  |  41  |  [1,5,0] |  [1,5,1] |  [1,5,2] |  [1,5,3] |  [1,5,4] |  [1,5,5] |  [1,5,6] |  [1,5,7] | 
 *  |  42  |  [2,5,0] |  [2,5,1] |  [2,5,2] |  [2,5,3] |  [2,5,4] |  [2,5,5] |  [2,5,6] |  [2,5,7] |
 *  |  43  |  [3,5,0] |  [3,5,1] |  [3,5,2] |  [3,5,3] |  [3,5,4] |  [3,5,5] |  [3,5,6] |  [3,5,7] |
 *  |  44  |  [4,5,0] |  [4,5,1] |  [4,5,2] |  [4,5,3] |  [4,5,4] |  [4,5,5] |  [4,5,6] |  [4,5,7] |
 *  |  45  |  [5,5,0] |  [5,5,1] |  [5,5,2] |  [5,5,3] |  [5,5,4] |  [5,5,5] |  [5,5,6] |  [5,5,7] |
 *  |  46  |  [6,5,0] |  [6,5,1] |  [6,5,2] |  [6,5,3] |  [6,5,4] |  [6,5,5] |  [6,5,6] |  [6,5,7] |
 *  |  47  |  [7,5,0] |  [7,5,1] |  [7,5,2] |  [7,5,3] |  [7,5,4] |  [7,5,5] |  [7,5,6] |  [7,5,7] |
 *  |  48  |  [0,6,0] |  [0,6,1] |  [0,6,2] |  [0,6,3] |  [0,6,4] |  [0,6,5] |  [0,6,6] |  [0,6,7] |
 *  |  49  |  [1,6,0] |  [1,6,1] |  [1,6,2] |  [1,6,3] |  [1,6,4] |  [1,6,5] |  [1,6,6] |  [1,6,7] |
 *  |  50  |  [2,6,0] |  [2,6,1] |  [2,6,2] |  [2,6,3] |  [2,6,4] |  [2,6,5] |  [2,6,6] |  [2,6,7] |
 *  |  51  |  [3,6,0] |  [3,6,1] |  [3,6,2] |  [3,6,3] |  [3,6,4] |  [3,6,5] |  [3,6,6] |  [3,6,7] |
 *  |  52  |  [4,6,0] |  [4,6,1] |  [4,6,2] |  [4,6,3] |  [4,6,4] |  [4,6,5] |  [4,6,6] |  [4,6,7] |
 *  |  53  |  [5,6,0] |  [5,6,1] |  [5,6,2] |  [5,6,3] |  [5,6,4] |  [5,6,5] |  [5,6,6] |  [5,6,7] |
 *  |  54  |  [6,6,0] |  [6,6,1] |  [6,6,2] |  [6,6,3] |  [6,6,4] |  [6,6,5] |  [6,6,6] |  [6,6,7] |
 *  |  55  |  [7,6,0] |  [7,6,1] |  [7,6,2] |  [7,6,3] |  [7,6,4] |  [7,6,5] |  [7,6,6] |  [7,6,7] |
 *  |  56  |  [0,7,0] |  [0,7,1] |  [0,7,2] |  [0,7,3] |  [0,7,4] |  [0,7,5] |  [0,7,6] |  [0,7,7] |
 *  |  57  |  [1,7,0] |  [1,7,1] |  [1,7,2] |  [1,7,3] |  [1,7,4] |  [1,7,5] |  [1,7,6] |  [1,7,7] |
 *  |  58  |  [2,7,0] |  [2,7,1] |  [2,7,2] |  [2,7,3] |  [2,7,4] |  [2,7,5] |  [2,7,6] |  [2,7,7] |
 *  |  59  |  [3,7,0] |  [3,7,1] |  [3,7,2] |  [3,7,3] |  [3,7,4] |  [3,7,5] |  [3,7,6] |  [3,7,7] | 
 *  |  60  |  [4,7,0] |  [4,7,1] |  [4,7,2] |  [4,7,3] |  [4,7,4] |  [4,7,5] |  [4,7,6] |  [4,7,7] |
 *  |  61  |  [5,7,0] |  [5,7,1] |  [5,7,2] |  [5,7,3] |  [5,7,4] |  [5,7,5] |  [5,7,6] |  [5,7,7] |
 *  |  62  |  [6,7,0] |  [6,7,1] |  [6,7,2] |  [6,7,3] |  [6,7,4] |  [6,7,5] |  [6,7,6] |  [6,7,7] |
 *  |  63  |  [7,7,0] |  [7,7,1] |  [7,7,2] |  [7,7,3] |  [7,7,4] |  [7,7,5] |  [7,7,6] |  [7,7,7] |
 * 
 *  onde cada tripla [ x, y, z ] representa o led na coordenada (x, y, z) do cubo.
 * 
 */



const SerialPort  = require('serialport');
const Readline    = require('@serialport/parser-readline');
const port        = new SerialPort('/dev/ttyUSB0',  {baudRate: 57600});
const parser      = port.pipe(new Readline({ delimiter: '\n' }));
const express     = require('express');

const animations  = require('./animations');


const app = express();


app.post('/animation', function ( req, res ){
   
});

app.listen(3000, ()=>{
    console.log("server listenind to 3000");
});


port.on("open", () => {
    console.log('serial port open');
});


/**
 * Recebimento de dados do arduino
 */
parser.on('data', d => {
    const data = JSON.parse(d);
    // console.log('[Serial port] data received', data);

    if(data.msg == 'request_new_frame') {
        sendCurrentFrame();
    }
});


/**
 * Variável que contém o frame atual
 */
let frame = animations.cleanFrame();

/**
 * Envio do frame atual
 */
function sendCurrentFrame() {
    for(var i = 0; i < 64; i++) {
        let sendByte = frame[i];
        let sendData = [ byteArrayToNumber(sendByte) ];

        port.write(sendData, (err) => {
            if (err) {
                console.log(err);
            }
        });
    }
}

/**
 * 
 * Função auxiliar do envio
 */
function byteArrayToNumber(byteArray) {
    var ret = 0;

    for(var i = 0; i < 8; i++) {
        ret += byteArray[i] * Math.pow(2, 7 - i);
    }

    return ret;
}


/**
 * Definição da animação
 */
let frames = [animations.cleanFrame()];

function setFrames(_frames) {
    frames = _frames;
}


let frameIntervalDelay;

function setFrameRate(frameRate) {
    frameIntervalDelay = 1000 / frameRate;

    clearInterval(loopingInterval);
    
    loopingInterval = setInterval(looping,  frameIntervalDelay);
}

let pointer = 0;

/**
 * Looping da animação
 */

let loopingInterval = setInterval(looping,  frameIntervalDelay);

function looping () {
    if(pointer >= frames.length) {
        pointer = 0;
    }

    
    frame = frames[ pointer ];

    pointer++;

}


/**
 * Animações a serem exibidas
 */

const animacoes = [
    {
        frameRate: 50,
        frames: animations.functions['animation-1']()
    },
    {
        frameRate: 15,
        frames: animations.functions['animation-2']()
    }
];


function changeAnimation(index) {
    const animacao = animacoes[index];

    setFrameRate(animacao.frameRate);
    setFrames(animacao.frames);
}



let animation = 0;

changeAnimation(1);

setInterval(() => {
    changeAnimation(animation);

    animation++;

    if(animation == animacoes.length)
        animation = 0;
}, 5000);